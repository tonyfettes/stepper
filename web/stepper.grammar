@precedence {
  call
  unary
  add @left
  mul @left
  and @left
  or @left
}

@skip { Whitespace | Comment }

@top Top { expression* }

keyword<term> { @specialize[@name={term}]<Identifier, term> }

@tokens {
  Whitespace {
    $[ \t\r\n]
  }

  Integer {
    @digit+
  }

  Identifier {
    $[a-zA-Z] $[a-zA-Z0-9_]*
  }

  Comment[isolate] {
    "#" ![#]* "#"
  }
}

Boolean { @specialize[@name=Boolean]<Identifier, "true" | "false"> }

pattern[@isGroup=Pattern] {
  "$e" | "$v" |
  Integer |
  Identifier |
  Function {
    keyword<"fun"> Identifier "->" expression
  } |
  Application {
    pattern !call "(" pattern ")"
  } |
  Arith {
    pattern !add ArithOp { "+" | "-" } pattern |
    pattern !mul ArithOp { "*" | "/" } pattern
  }
}

FilterKeyword {
  keyword<"eval"> | keyword<"hide"> | keyword<"pause"> | keyword<"debug">
}

expression {
  Integer |
  Negate {
    ArithOp { "-" } !unary expression
  } |
  Identifier |
  Boolean |
  Let {
    LetStatement { keyword<"let"> Identifier "=" expression } keyword<"in"> expression
  } |
  LetRec {
    LetRecStatement { keyword<"let"> keyword<"rec"> Identifier "=" expression } keyword<"in"> expression
  } |
  If {
    keyword<"if"> expression keyword<"then"> expression keyword<"else"> expression
  } |
  Function {
    keyword<"fun"> Identifier "->" expression
  } |
  Fix {
    keyword<"fix"> Identifier "->" expression
  } |
  Application {
    expression !call "(" expression ")"
  } |
  FilterExpression {
    FilterKeyword pattern keyword<"in"> expression
  }
  ArithExpression {
    expression !add ArithOp { "+" | "-" } expression |
    expression !mul ArithOp { "*" | "/" } expression
  }
}
